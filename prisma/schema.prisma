// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================
// User Model
// =================================
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  phone     String
  avatar    String
  role      UserRole @default(GUEST)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Student specific fields
  student Student?

  // Admin specific fields (if needed)
  admin Admin?

  staf    Staff?
  Payment Payment[]

  @@map("users")
}

// ================================
// Admin Model
// =================================

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Additional admin fields
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("admin_profiles")
}

// ================================
// Faculty Model
// =================================
model Faculty {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  departments Department[]
  students    Student[]

  @@map("faculties")
}

// ================================
// Department Model
// =================================

model Department {
  id          String  @id @default(cuid())
  name        String
  code        String  @unique
  description String?
  isActive    Boolean @default(true)

  // Foreign Keys
  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students Student[]

  @@map("departments")
}

// ================================
// AcademicSession Model
// =================================

model AcademicSession {
  id        String   @id @default(cuid())
  name      String   @unique // e.g., "2023-24"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students Student[]

  @@map("academic_sessions")
}

// Student Management
model Student {
  id        String  @id @default(cuid())
  studentId String? @unique // Roll number or student ID
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  departmentId String
  department   Department      @relation(fields: [departmentId], references: [id])
  sessionId    String
  session      AcademicSession @relation(fields: [sessionId], references: [id])

  // Student Status
  status         StudentStatus @default(PENDING)
  admissionDate  DateTime?
  graduationDate DateTime?

  // Personal Info
  dateOfBirth DateTime?
  address     String?
  fullName    String
  fatherName  String?
  motherName  String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  passportPhoto String

  // Relations

  statusHistory StudentStatusHistory[]
  Faculty       Faculty?               @relation(fields: [facultyId], references: [id])
  facultyId     String?

  @@map("students")
}

model StudentStatusHistory {
  id        String  @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  fromStatus StudentStatus?
  toStatus   StudentStatus
  reason     String?
  changedBy  String? // Admin user ID
  changedAt  DateTime       @default(now())

  @@map("student_status_history")
}

// Payment System
model PaymentType {
  id          String  @id @default(cuid())
  name        String  @unique // e.g., "Tuition Fee", "Admission Fee", "Library Fee"
  description String?
  amount      Decimal @db.Decimal(10, 2)
  isActive    Boolean @default(true)
  isOneTime   Boolean @default(true) // Indicates one-time vs recurring fee
  features    Json? // Store list of features (e.g., benefits in JSON array)
  label       String? // UI label like "RECOMMENDED", "ACTIVE NOW"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payments Payment[]

  @@map("payment_types")
}

model Payment {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  paymentTypeId String
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])

  amount      Decimal       @db.Decimal(10, 2)
  status      PaymentStatus @default(PENDING)
  paymentDate DateTime?
  dueDate     DateTime?

  // Payment Details
  transactionId String?        @unique
  paymentMethod PaymentMethod?
  reference     String?
  notes         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// Leadership & Staff Management
model Staff {
  id         String  @id @default(cuid())
  name       String
  phone      String?
  position   String // Principal, Vice-Principal, Professor, etc.
  title      String? // Educational Visionary, Student Success Champion, etc.
  department String?

  // Professional Info
  qualification  String? // PhD Leadership, M.Ed. Design, etc.
  experience     Int? // Years of experience
  specialization String? // Innovation Expert, Community Builder, etc.

  // Personal Info
  bio          String?
  achievements Json? // Array of achievements
  awards       Int?    @default(0)

  // Contact & Social
  officeLocation String?
  officeHours    String?
  linkedinUrl    String?
  researchUrl    String?

  // Media
  profileImage String?
  coverImage   String?

  // Status & Metadata
  isActive     Boolean   @default(true)
  isFeatured   Boolean   @default(false)
  displayOrder Int?      @default(0)
  joinedDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  stats       StaffStats[]
  socialLinks StaffSocialLink[]

  @@map("staff")
}

model StaffStats {
  id      String @id @default(cuid())
  staffId String
  staff   Staff  @relation(fields: [staffId], references: [id], onDelete: Cascade)

  label String // "Years Here", "Programs", "Awards", "Students", etc.
  value String // "16", "50+", "15", "5K+", etc.
  icon  String? // Icon name for frontend
  color String? // Color theme
  order Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff_stats")
}

model StaffSocialLink {
  id      String @id @default(cuid())
  staffId String
  staff   Staff  @relation(fields: [staffId], references: [id], onDelete: Cascade)

  platform String // email, phone, linkedin, twitter, etc.
  url      String
  label    String? // Display label
  icon     String? // Icon name
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("staff_social_links")
}

// Events Management
model Event {
  id           String   @id @default(cuid())
  name         String
  category     String // Academic, Cultural, Technology, etc.
  description  String?
  date         DateTime
  maxAttendees Int
  location     String

  // Event Info
  status EventStatus @default(UPCOMING)

  type EventType @default(PHYSICAL)

  // Capacity & Registration

  registrationDeadline DateTime
  registrationFee      Decimal? @db.Decimal(10, 2)
  images               String[] @default([])

  contactEmail  String?
  contactPhone  String?
  organizerName String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  registrations EventRegistration[]

  @@map("events")
}

model EventRegistration {
  id      String @id @default(cuid())
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  // Registrant Info
  name  String
  email String

  // Registration Details
  status       RegistrationStatus @default(PENDING)
  registeredAt DateTime           @default(now())

  // Payment Info (if applicable)
  eventPaymentStatus EventPaymentStatus?
  paymentId          String?
  amountPaid         Decimal?            @db.Decimal(10, 2)

  // Additional Info
  specialRequests     String?
  dietaryRestrictions String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, email])
  @@map("event_registrations")
}

model ContactInquiry {
  id      String  @id @default(cuid())
  name    String
  email   String
  phone   String?
  subject String?
  message String

  type   InquiryType   @default(GENERAL)
  status InquiryStatus @default(PENDING)

  // Response
  response    String?
  respondedBy String? // Staff ID
  respondedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_inquiries")
}

// Enums
enum UserRole {
  ADMIN
  SUPER_ADMIN
  STUDENT
  STAFF
  GUEST
}

enum StudentStatus {
  PENDING
  APPROVED
  SUSPENDED
  GRADUATED
  DROPPED
  TRANSFERRED
}

enum PaymentStatus {
  PENDING
  COMPLETE
  FAILED
  CANCELED
  REFUNDED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MOBILE_BANKING
  CARD
  ONLINE
}

enum EventStatus {
  DRAFT
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
  POSTPONED
  REGISTRATION_CLOSED
}

enum EventType {
  PHYSICAL
  VIRTUAL
  HYBRID
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
  CHECKED_IN
}

enum EventPaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum SponsorshipLevel {
  PLATINUM
  GOLD
  SILVER
  BRONZE
  PARTNER
}

enum InquiryType {
  GENERAL
  ADMISSION
  EVENT
  TECHNICAL
  COMPLAINT
  SUGGESTION
}

enum InquiryStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}
